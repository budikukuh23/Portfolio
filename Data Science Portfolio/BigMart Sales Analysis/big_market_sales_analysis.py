# -*- coding: utf-8 -*-
"""Big Market Sales Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfP2zrdx5n-76ALV0tuAN6VpDrRjeKFb
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd 
import warnings
import matplotlib.pyplot as plt 
# %matplotlib inline

warnings.simplefilter("ignore")

# Distribution graphs (histogram/bar graph) of column data
def plot_per_col_dist(df, n_graph_shown, n_graph_per_row):
    nunique = df.nunique()
    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    n_rows, n_cols = df.shape
    col_names = list(df)
    n_graph_row = (n_cols + n_graph_per_row - 1) / n_graph_per_row
    plt.figure(num = None, figsize = (6 * n_graph_per_row, 8 * n_graph_row), dpi = 80, facecolor = 'w', edgecolor = 'k')
    
    for i in range(min(n_cols, n_graph_shown)):
        plt.subplot(n_graph_row, n_graph_per_row, i + 1)
        col_df = df.iloc[:, i]
       
        if (not np.issubdtype(type(col_df.iloc[0]), np.number)):
            valueCounts = col_df.value_counts()
            valueCounts.plot.bar()
        else:
            col_df.hist()
        
        plt.ylabel('counts')
        plt.xticks(rotation = 90)
        plt.title(f'{col_names[i]} (column {i})')
    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)
    plt.show()

# Correlation matrix
def plot_corr_mat(df, g_width):
    file_name = df.dataframeName
    df = df.dropna('columns') # drop columns with NaN
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    
    if df.shape[1] < 2:
        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')
        return
    corr = df.corr()
    
    plt.figure(num=None, figsize=(g_width, g_width), dpi=80, facecolor='w', edgecolor='k')
    correlation_mat = plt.matshow(corr, fignum = 1)   
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.gca().xaxis.tick_bottom()
    plt.colorbar(correlation_mat)
    plt.title(f'Correlation Matrix for {file_name}', fontsize=15)
    plt.show()

# Scatter and density plots
def plot_scatter_mat(df, plot_size, text_size):
    df = df.select_dtypes(include =[np.number]) # keep only numerical columns
    ''' removing nulll values '''
    df = df.dropna('columns')
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    col_names = list(df)
    
    if len(col_names) > 10: # reduce the number of columns for matrix inversion of kernel density plots
        col_names = col_names[:10]
    df = df[col_names]
    
    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plot_size, plot_size], diagonal='kde')
    corrs = df.corr().values
    
    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):
        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=text_size)
    
    plt.suptitle('Scatter and Density Plot')
    plt.show()

''' reading 1st file i.e Train.csv '''
n_rows = 100
train_df = pd.read_csv('https://firebasestorage.googleapis.com/v0/b/budi-23.appspot.com/o/dataset%2FBigMart%20Sales%20Analysis%2FTrain.csv?alt=media&token=aa91e706-a09f-4a3f-ab66-89e4d211bac5', nrows=n_rows)
train_df.dataframeName = 'Train.csv'

''' displaying fist five rows '''
train_df.head()

''' shape of dataset '''
train_df.shape

''' scatter plot'''
plot_scatter_mat(train_df, 9, 10)

''' dist plot '''
plot_per_col_dist(train_df, 10, 5)

''' correlation plot '''
plot_corr_mat(train_df, 8)

''' reading 2nd file i.e Test.csv '''
n_rows = 100
test_df = pd.read_csv('https://firebasestorage.googleapis.com/v0/b/budi-23.appspot.com/o/dataset%2FBigMart%20Sales%20Analysis%2FTest.csv?alt=media&token=ed5875d0-abda-4870-b6ac-aaae566b6355', nrows=n_rows)
test_df.dataframeName = 'Test.csv'

''' displaying 1st 5 rows '''
test_df.head()

''' shape of datawset '''
test_df.shape

''' scatter plot'''
plot_scatter_mat(test_df, 9, 10)

''' dist plot '''
plot_per_col_dist(test_df, 10, 5)

''' correlation plot '''
plot_corr_mat(test_df, 8)