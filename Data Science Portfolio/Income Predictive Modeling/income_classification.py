# -*- coding: utf-8 -*-
"""Income Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gTKljKTbzrhRG_CyRCsUlKMjoLke076z
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from lightgbm import LGBMClassifier

warnings.filterwarnings('ignore')

''' reading data '''
df = pd.read_csv('https://firebasestorage.googleapis.com/v0/b/budi-23.appspot.com/o/dataset%2FIncome%20Predictive%20Modeling%2Fadult.csv?alt=media&token=faa90eea-1666-45f0-9b9c-10ac08b99c1f')

''' displaying first 5 rows '''
df.head()

''' shape of data '''
df.shape

''' checking null values '''
df.isnull().sum()

''' info of data '''
df.describe()

''' renaming column names '''
df.columns = ['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status', 'occupation', 'relationship', 
              'race', 'sex', 'capita_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income']

df.head()

''' changing incoem variable '''
df.income = np.where(df['income'] == ' >50K', 1, 0)

''' unique values in each categorical variables '''
for c in ['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country']:
    print("{} has {} unique categories".format(c, df[c].unique()))
    print("-"*100)

''' changing sex column '''
df['sex'] = np.where(df['sex'] == ' Male', 1, 0)

''' value counts of workclass '''
workclass_label = df.workclass.value_counts()

''' barplot '''
plt.figure(figsize=(10, 5))
sns.barplot(workclass_label, workclass_label.index);
plt.ylabel('workclass', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value counts of educatuion '''
edu_label = df.education.value_counts()[:5]

''' barplot '''
plt.figure(figsize=(10, 5))
sns.barplot(edu_label, edu_label.index);
plt.ylabel('education', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value_counts of marital_status '''
ms_label = df.marital_status.value_counts()

''' barplot '''
plt.figure(figsize=(10, 5))
sns.barplot(ms_label, ms_label.index);
plt.ylabel('marital_staus', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value_counts of occupation '''
occ_label = df.occupation.value_counts()[:5]

''' barplot '''
plt.figure(figsize=(8, 5))
sns.barplot(occ_label, occ_label.index);
plt.ylabel('occupation', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value_counts of relationship '''
rel_label = df.relationship.value_counts()

''' barplot '''
plt.figure(figsize=(8, 5))
sns.barplot(rel_label, rel_label.index);
plt.ylabel('relationship', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value_counts of race '''
r_label = df.race.value_counts()

''' barplot '''
plt.figure(figsize=(8, 5))
sns.barplot(r_label, r_label.index);
plt.ylabel('race', fontsize=15);
plt.xlabel('count', fontsize=15);

''' value_counts of native_country '''
nc_label = df.native_country.value_counts()[:10]

''' barplot '''
plt.figure(figsize=(8, 5))
sns.barplot(nc_label, nc_label.index, log=True);
plt.ylabel('native_country', fontsize=15);
plt.xlabel('count', fontsize=15);

''' changing native_country if united_state then united_state else other '''
df['native_country'] = np.where(df['native_country'] == ' United-States', 'United-States', 'Others')

''' filling ? value with np.nan in workclass '''
df['workclass'] = np.where(df['workclass'] == ' ?', np.nan, df['workclass'])

''' filling ? value with np.nan in occupation '''
df['occupation'] = np.where(df['occupation'] == ' ?', np.nan, df['occupation'])

''' dropping null values '''
df.dropna(inplace=True)

''' changing education variable '''
edu_label = {value: key for key, value in enumerate(df.education.unique())}
df['education'] = df['education'].map(edu_label)

''' changing workclass variable '''
wc_label = {value: key for key, value in enumerate(df.workclass.unique())}
df['workclass'] = df['workclass'].map(wc_label)

''' changing marital_status variable '''
ms_label = {value: key for key, value in enumerate(df.marital_status.unique())}
df.marital_status = df.marital_status.map(ms_label)

''' changing occupation variable '''
occ_label = {value: key for key, value in enumerate(df.occupation.unique())}
df.occupation = df.occupation.map(occ_label)

''' changing race variable '''
r_label = {value: key for key, value in enumerate(df.race.unique())}
df.race =  df.race.map(r_label)

''' changing race native_country '''
df['native_country'] = np.where(df['native_country'] == 'United-States', 1, 0)

''' changing race relationship '''
rel_label = {value: key for key, value in enumerate(df.relationship.unique())}
df.relationship = df.relationship.map(rel_label)

''' independent and dependent variables '''
X, y = df.iloc[:, :-1], df.iloc[:, -1]

''' train test split '''
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

print('Xtrain shape: ', X_train.shape)
print('Xtest shape: ', X_test.shape)

''' Mode '''
lgbm = LGBMClassifier()

''' fit on data '''
lgbm.fit(X_train, y_train)

''' prediction '''
pred = lgbm.predict(X_test)

print("Accuracy Score: ", accuracy_score(y_test, pred))